!function(e){var t={};function s(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(r,n,function(t){return e[t]}.bind(null,n));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);class r{constructor(){this._username="",this._password=""}set username(e){this._username=e}set password(e){this._password=e}}const n={username:/^[a-zA-Z\d.]{6,}$/,password:/^(?!.*?[\^])(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/,confirmed:/^(?!.*?[\^])(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/,email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/};class o{constructor(e){this.dbName=e,this.addUser=e=>new Promise((t,s)=>{this.usernameExists(e.username).then(t=>{if(t)console.log("Err: Username already exists.");else{const t=this.db.transaction(["users"],"readwrite").objectStore("users").add(e);t.onsuccess=function(e){console.log("User added!")},t.onerror=function(e){}}})}),this.usernameExists=e=>new Promise((t,s)=>{this.db.transaction(["users"]).objectStore("users").openCursor().onsuccess=s=>{let r=s.target.result;r?r.value.username===e&&!1===r.value.deleted?t(!0):r.continue():t(!1)}}),this.verifyLoginInfo=e=>new Promise((t,s)=>{this.db.transaction(["users"]).objectStore("users").openCursor().onsuccess=s=>{let r=s.target.result;r?r.value.username===e.username&&!1===r.value.deleted?r.value.password===e.password?t(0):t(-1):r.continue():t(-2)}}),this.addNote=e=>{},this.deleteNote=e=>{},this.completeNote=e=>{},this.listNotes=e=>{},this.addCategory=e=>{},this.IndxDb=window.indexedDB,this.db={},this.openDB()}openDB(){return new Promise((e,t)=>{let s;(s=this.IndxDb.open(this.dbName)).onupgradeneeded=e=>{this.db=e.target.result,this.db.createObjectStore("users",{keyPath:"id",autoIncrement:!0}),this.db.createObjectStore("list",{keyPath:"id"}),this.db.createObjectStore("category",{keyPath:"id",autoIncrement:!0}),console.log("Database was set up successfully")},s.onsuccess=t=>{e(this.db=t.target.result)},s.onerror=()=>{t(console.log("Database failed to open"))}})}}const a=document.querySelector("#loginUsername"),i=document.querySelector("#loginPassword"),d=document.querySelector(".form-index"),u=document.querySelector(".login-error");let l=new o("database1");const c=new class extends r{constructor(){super()}submitForm(){return{username:this._username,password:this._password}}};function m(e){"loginUsername"===e.id?c.username=e.value:"loginPassword"===e.id&&(c.password=e.value)}a&&a.addEventListener("blur",()=>{m(a)}),i&&i.addEventListener("blur",()=>{m(i)}),d&&d.addEventListener("submit",e=>{e.preventDefault(),l.verifyLoginInfo(c.submitForm()).then(e=>{!function(e){0===e?u.innerText="":-1===e?u.innerText="wrong password":-2===e&&(u.innerText="username does not exist")}(e),0===e&&sessionStorage.setItem("login-token","valid")})});const h=document.querySelector("#username"),f=document.querySelector("#password"),p=document.querySelector("#confirmed"),b=document.querySelector("#email"),v=document.querySelector(".form-registration"),y=document.querySelector("#submit"),w=document.querySelector(".pass-match");let g=new o("database1");const _=new class extends r{constructor(){super(),this._confirmed="",this._email=""}set confirmed(e){this._confirmed=e}set email(e){this._email=e}validateInput(e,t){return n[e].test(t)}checkPasswordMatch(){return this._password===this._confirmed}validateForm(){return""!==this._username&&""!==this._password&&""!==this._confirmed&&""!==this._email&&this.checkPasswordMatch()}submitForm(){return{username:this._username,password:this._password,email:this._email,deleted:!1}}};function S(e){let t=_.validateInput(e.id,e.value);try{if(!t)throw"Invalid Input"}catch(t){e.className="form-control is-invalid"}finally{"username"===e.id?_.username=t?e.value:"":"password"===e.id?_.password=t?e.value:"":"confirmed"===e.id?_.confirmed=t?e.value:"":"email"===e.id&&(_.email=t?e.value:""),t&&(e.className="form-control is-valid"),_.validateForm()?(y.disabled=!1,w.style.display="none"):(y.disabled=!0,_.checkPasswordMatch()?w.style.display="none":w.style.display="block")}}h&&h.addEventListener("blur",()=>{S(h)}),f&&f.addEventListener("blur",()=>{S(f)}),p&&p.addEventListener("blur",()=>{S(p)}),b&&b.addEventListener("blur",()=>{S(b)}),v&&v.addEventListener("submit",e=>{e.preventDefault(),g.addUser(_.submitForm()).then(e=>{console.log(e)}).catch()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,