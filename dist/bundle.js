!function(e){var t={};function s(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(r,n,function(t){return e[t]}.bind(null,n));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);class r{constructor(){this._username="",this._password=""}set username(e){this._username=e}set password(e){this._password=e}}const n={username:/^[a-zA-Z\d.]{6,}$/,password:/^(?!.*?[\^])(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/,confirmed:/^(?!.*?[\^])(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{7,}$/,email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/};class o{constructor(e){this.dbName=e,this.addUser=e=>new Promise((t,s)=>{this.usernameExists(e.username).then(t=>{if(t)console.log("Err: Username already exists.");else{const t=this.db.transaction(["users"],"readwrite").objectStore("users").add(e);t.onsuccess=function(e){console.log("User added!")},t.onerror=function(e){}}})}),this.usernameExists=e=>new Promise((t,s)=>{this.db.transaction(["users"]).objectStore("users").openCursor().onsuccess=s=>{let r=s.target.result;r?r.value.username===e&&!1===r.value.deleted?t(!0):r.continue():t(!1)}}),this.verifyLoginInfo=e=>new Promise((t,s)=>{this.db.transaction(["users"]).objectStore("users").openCursor().onsuccess=s=>{let r=s.target.result;r?r.value.username===e.username&&!1===r.value.deleted?r.value.password===e.password?t(0):t(-1):r.continue():t(-2)}}),this.addNote=e=>{},this.deleteNote=e=>{},this.completeNote=e=>{},this.listNotes=e=>{},this.addCategory=e=>{},this.IndxDb=window.indexedDB,this.db={},this.openDB()}openDB(){return new Promise((e,t)=>{let s;(s=this.IndxDb.open(this.dbName)).onupgradeneeded=e=>{this.db=e.target.result,this.db.createObjectStore("users",{keyPath:"id",autoIncrement:!0}),this.db.createObjectStore("list",{keyPath:"id"}),this.db.createObjectStore("category",{keyPath:"id",autoIncrement:!0}),console.log("Database was set up successfully")},s.onsuccess=t=>{e(this.db=t.target.result)},s.onerror=()=>{t(console.log("Database failed to open"))}})}}const a=document.querySelector("#loginUsername"),i=document.querySelector("#loginPassword"),d=document.querySelector(".form-index"),u=document.querySelector(".login-error");let l=new o("database1");const c=new class extends r{constructor(){super()}submitForm(){return{username:this._username,password:this._password}}};function m(e){"loginUsername"===e.id?c.username=e.value:"loginPassword"===e.id&&(c.password=e.value)}a&&a.addEventListener("blur",()=>{m(a)}),i&&i.addEventListener("blur",()=>{m(i)}),d&&d.addEventListener("submit",e=>{e.preventDefault(),l.verifyLoginInfo(c.submitForm()).then(e=>{!function(e){0===e?u.innerText="":-1===e?u.innerText="wrong password":-2===e&&(u.innerText="username does not exist")}(e),0===e&&sessionStorage.setItem("login-token","valid")})});const h=document.querySelector("#username"),f=document.querySelector("#password"),p=document.querySelector("#confirmed"),b=document.querySelector("#email"),v=document.querySelector(".form-registration"),y=document.querySelector("#submit"),w=document.querySelector(".pass-match");let g=new o("database1");const _=new class extends r{constructor(){super(),this._confirmed="",this._email=""}set confirmed(e){this._confirmed=e}set email(e){this._email=e}validateInput(e,t){return n[e].test(t)}checkPasswordMatch(){return this._password===this._confirmed}validateForm(){return""!==this._username&&""!==this._password&&""!==this._confirmed&&""!==this._email&&this.checkPasswordMatch()}submitForm(){return{username:this._username,password:this._password,email:this._email,deleted:!1}}};function S(e){let t=_.validateInput(e.id,e.value);try{if(!t)throw"Invalid Input"}catch(t){e.className="form-control is-invalid"}finally{"username"===e.id?_.username=t?e.value:"":"password"===e.id?_.password=t?e.value:"":"confirmed"===e.id?_.confirmed=t?e.value:"":"email"===e.id&&(_.email=t?e.value:""),t&&(e.className="form-control is-valid"),_.validateForm()?(y.disabled=!1,w.style.display="none"):(y.disabled=!0,_.checkPasswordMatch()?w.style.display="none":w.style.display="block")}}h&&h.addEventListener("blur",()=>{S(h)}),f&&f.addEventListener("blur",()=>{S(f)}),p&&p.addEventListener("blur",()=>{S(p)}),b&&b.addEventListener("blur",()=>{S(b)}),v&&v.addEventListener("submit",e=>{e.preventDefault(),g.addUser(_.submitForm()).then(e=>{console.log(e)}).catch()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9kYXRhYmFzZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9naW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZ2lzdHJhdGlvbi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkF1dGhlbnRpY2F0aW9uIiwidGhpcyIsIl91c2VybmFtZSIsIl9wYXNzd29yZCIsImlucHV0VmFsaWRhdGlvblJlZ2V4IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImNvbmZpcm1lZCIsImVtYWlsIiwiRGF0YWJhc2UiLCJkYk5hbWUiLCJhZGRVc2VyIiwibmV3VXNlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidXNlcm5hbWVFeGlzdHMiLCJ0aGVuIiwiZXhpc3RzIiwiY29uc29sZSIsImxvZyIsInJlcXVlc3QiLCJkYiIsInRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmUiLCJhZGQiLCJvbnN1Y2Nlc3MiLCJlIiwib25lcnJvciIsIm9wZW5DdXJzb3IiLCJjdXJzb3IiLCJ0YXJnZXQiLCJyZXN1bHQiLCJkZWxldGVkIiwiY29udGludWUiLCJ2ZXJpZnlMb2dpbkluZm8iLCJ1c2VySW5mbyIsImFkZE5vdGUiLCJub3RlVGV4dCIsImRlbGV0ZU5vdGUiLCJpZCIsImNvbXBsZXRlTm90ZSIsImxpc3ROb3RlcyIsImNhdGVnb3J5TmFtZSIsImFkZENhdGVnb3J5IiwiSW5keERiIiwid2luZG93IiwiaW5kZXhlZERCIiwib3BlbkRCIiwicmVxIiwib3BlbiIsIm9udXBncmFkZW5lZWRlZCIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsImF1dG9JbmNyZW1lbnQiLCJsb2dpblVzZXJuYW1lIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibG9naW5QYXNzd29yZCIsImxvZ2luRm9ybSIsImxvZ2luRXJyb3IiLCJ1c2VyIiwic3VwZXIiLCJnZXRJbnB1dCIsImVsZW0iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdEZvcm0iLCJyZXNwIiwiZmxhZyIsImlubmVyVGV4dCIsImhhbmRsZUlucHV0cyIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsInVzZXJuYW1lSW5wdXQiLCJwYXNzd29yZElucHV0IiwiY29uZmlybVB3SW5wdXQiLCJlbWFpbElucHV0Iiwic3VibWl0QnV0dG9uIiwicGFzc3dvcmRNYXRjaFBhcmFncmFwaCIsIl9jb25maXJtZWQiLCJfZW1haWwiLCJ0ZXN0IiwiY2hlY2tQYXNzd29yZE1hdGNoIiwidmFsaWRhdGVGaWVsZCIsInZhbGlkIiwidmFsaWRhdGVJbnB1dCIsImVyciIsImNsYXNzTmFtZSIsInZhbGlkYXRlRm9ybSIsImRpc2FibGVkIiwic3R5bGUiLCJkaXNwbGF5IiwicmVzcG9uc2UiLCJjYXRjaCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVB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QUFRLEtBQVFvQixFQUFjVixLQUM1RUMsR0FBZUEsRUFBY1gsaUJBQWlCLE9BQVEsS0FBUW9CLEVBQWNULEtBQzVFQyxHQUFnQkEsRUFBZVosaUJBQWlCLE9BQVEsS0FBUW9CLEVBQWNSLEtBQzlFQyxHQUFZQSxFQUFXYixpQkFBaUIsT0FBUSxLQUFRb0IsRUFBY1AsS0FFdEUsR0FDRixFQUFLYixpQkFBaUIsU0FBV0MsSUFDL0JBLEVBQU1DLGlCQUVOLEVBQUd4RCxRQUFRLEVBQUt5RCxjQUNibkQsS0FBTTZFLElBQ0wzRSxRQUFRQyxJQUFJMEUsS0FFYkMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiY2xhc3MgQXV0aGVudGljYXRpb24ge1xyXG5cdHByb3RlY3RlZCBfdXNlcm5hbWU6IHN0cmluZztcclxuXHRwcm90ZWN0ZWQgX3Bhc3N3b3JkOiBzdHJpbmc7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5fdXNlcm5hbWUgPSAnJztcclxuXHRcdHRoaXMuX3Bhc3N3b3JkID0gJyc7XHJcblx0fVxyXG5cclxuXHRzZXQgdXNlcm5hbWUodmFsdWU6IHN0cmluZykgeyB0aGlzLl91c2VybmFtZSA9IHZhbHVlOyB9O1xyXG5cdHNldCBwYXNzd29yZCh2YWx1ZTogc3RyaW5nKSB7IHRoaXMuX3Bhc3N3b3JkID0gdmFsdWU7IH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBJVXNlciB7XHJcblx0dXNlcm5hbWU6IHN0cmluZyxcclxuXHRwYXNzd29yZDogc3RyaW5nLFxyXG5cdGVtYWlsOiBzdHJpbmcsXHJcblx0ZGVsZXRlZDogYm9vbGVhblxyXG59XHJcblxyXG5pbnRlcmZhY2UgSUxvZ2luIHtcclxuICB1c2VybmFtZTogc3RyaW5nLFxyXG4gIHBhc3N3b3JkOiBzdHJpbmdcclxufVxyXG5cclxuaW50ZXJmYWNlIElPcHRpb25zIHtcclxuXHRbb3B0aW9uOiBzdHJpbmddOiBSZWdFeHA7XHJcbn07XHJcblxyXG5jb25zdCBpbnB1dFZhbGlkYXRpb25SZWdleDogSU9wdGlvbnMgPSB7XHJcblx0dXNlcm5hbWU6IC9eW2EtekEtWlxcZC5dezYsfSQvLFxyXG5cdHBhc3N3b3JkOiAvXig/IS4qP1tcXF5dKSg/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZCkuezgsfSQvLFxyXG5cdGNvbmZpcm1lZDogL14oPyEuKj9bXFxeXSkoPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipcXGQpLns3LH0kLyxcclxuXHRlbWFpbDogL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkL1xyXG59O1xyXG5cclxuZXhwb3J0IHtcclxuICBBdXRoZW50aWNhdGlvbixcclxuICBJVXNlcixcclxuICBJTG9naW4sXHJcbiAgaW5wdXRWYWxpZGF0aW9uUmVnZXhcclxufVxyXG4iLCJpbXBvcnQgeyBJVXNlciwgSUxvZ2luIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5jbGFzcyBEYXRhYmFzZSB7XHJcblx0cHJpdmF0ZSBJbmR4RGI6IElEQkZhY3Rvcnk7XHJcblx0cHJpdmF0ZSBkYjogSURCRGF0YWJhc2U7XHJcblx0XHJcblx0Y29uc3RydWN0b3IocHVibGljIGRiTmFtZTogc3RyaW5nKSB7XHJcblx0XHR0aGlzLkluZHhEYiA9IHdpbmRvdy5pbmRleGVkREI7XHJcblx0XHR0aGlzLmRiID0ge30gYXMgSURCRGF0YWJhc2U7XHJcblx0XHR0aGlzLm9wZW5EQigpO1xyXG5cdH1cclxuXHJcblx0Ly8gT3BlbiBkYXRhYmFzZSBvbiBjbGFzcyBpbnN0YW50aWF0aW9uXHJcblx0b3BlbkRCKCkge1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0bGV0IHJlcTogSURCT3BlbkRCUmVxdWVzdDtcclxuXHRcdFx0cmVxID0gdGhpcy5JbmR4RGIub3Blbih0aGlzLmRiTmFtZSk7XHJcblxyXG5cdFx0XHQvLyBTZXQgdXAgdGhlIG9iamVjdCBzdG9yZSBpZiBuZXcgZGF0YWJhc2VcclxuXHRcdFx0cmVxLm9udXBncmFkZW5lZWRlZCA9IChlOiBhbnkpID0+IHtcclxuXHRcdFx0XHR0aGlzLmRiID0gZS50YXJnZXQucmVzdWx0O1xyXG5cclxuXHRcdFx0XHR0aGlzLmRiLmNyZWF0ZU9iamVjdFN0b3JlKFwidXNlcnNcIiwge2tleVBhdGg6ICdpZCcsIGF1dG9JbmNyZW1lbnQ6IHRydWV9KTtcclxuXHRcdFx0XHR0aGlzLmRiLmNyZWF0ZU9iamVjdFN0b3JlKFwibGlzdFwiLCB7a2V5UGF0aDogJ2lkJ30pO1xyXG5cdFx0XHRcdHRoaXMuZGIuY3JlYXRlT2JqZWN0U3RvcmUoXCJjYXRlZ29yeVwiLCB7a2V5UGF0aDogJ2lkJywgYXV0b0luY3JlbWVudDogdHJ1ZX0pO1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmxvZygnRGF0YWJhc2Ugd2FzIHNldCB1cCBzdWNjZXNzZnVsbHknKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmVxLm9uc3VjY2VzcyA9IChlOiBhbnkpID0+IHtcclxuXHRcdFx0XHRyZXNvbHZlKHRoaXMuZGIgPSBlLnRhcmdldC5yZXN1bHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJlcS5vbmVycm9yID0gKCkgPT4ge1xyXG5cdFx0XHRcdHJlamVjdChjb25zb2xlLmxvZygnRGF0YWJhc2UgZmFpbGVkIHRvIG9wZW4nKSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiAgVFJBTlNBQ1RJT05TIFxyXG5cdCAqL1xyXG5cdGFkZFVzZXIgPSAobmV3VXNlcjogSVVzZXIpID0+IHtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRoaXMudXNlcm5hbWVFeGlzdHMobmV3VXNlci51c2VybmFtZSlcclxuXHRcdFx0XHQudGhlbigoZXhpc3RzKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoIWV4aXN0cykge1xyXG5cdFx0XHRcdFx0XHRjb25zdCByZXF1ZXN0ID0gdGhpcy5kYi50cmFuc2FjdGlvbihbXCJ1c2Vyc1wiXSwgXCJyZWFkd3JpdGVcIilcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5vYmplY3RTdG9yZShcInVzZXJzXCIpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYWRkKG5ld1VzZXIpO1xyXG5cclxuXHRcdFx0XHRcdFx0cmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbihlOiBhbnkpIHtcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIlVzZXIgYWRkZWQhXCIpO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHRyZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbihlOiBhbnkpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBoYW5kbGUgZXJyb3JcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJFcnI6IFVzZXJuYW1lIGFscmVhZHkgZXhpc3RzLlwiKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHVzZXJuYW1lRXhpc3RzID0gKHVzZXJuYW1lOiBzdHJpbmcpID0+IHtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRoaXMuZGIudHJhbnNhY3Rpb24oW1widXNlcnNcIl0pXHJcblx0XHRcdFx0XHRcdFx0XHRcdC5vYmplY3RTdG9yZShcInVzZXJzXCIpXHJcblx0XHRcdFx0XHRcdFx0XHRcdC5vcGVuQ3Vyc29yKCkub25zdWNjZXNzID0gKGU6IGFueSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxldCBjdXJzb3IgPSBlLnRhcmdldC5yZXN1bHQgYXMgSURCQ3Vyc29yV2l0aFZhbHVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChjdXJzb3IpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLnZhbHVlLnVzZXJuYW1lID09PSB1c2VybmFtZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IudmFsdWUuZGVsZXRlZCA9PT0gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y3Vyc29yLmNvbnRpbnVlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoZmFsc2UpOyAvLyBubyBtb3JlIGVudHJpZXNcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdH0pO1xyXG4gIH07XHJcblxyXG4gIHZlcmlmeUxvZ2luSW5mbyA9ICh1c2VySW5mbzogSUxvZ2luKSA9PiB7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHR0aGlzLmRiLnRyYW5zYWN0aW9uKFtcInVzZXJzXCJdKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQub2JqZWN0U3RvcmUoXCJ1c2Vyc1wiKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQub3BlbkN1cnNvcigpLm9uc3VjY2VzcyA9IChlOiBhbnkpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsZXQgY3Vyc29yID0gZS50YXJnZXQucmVzdWx0IGFzIElEQkN1cnNvcldpdGhWYWx1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoY3Vyc29yKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci52YWx1ZS51c2VybmFtZSA9PT0gdXNlckluZm8udXNlcm5hbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLnZhbHVlLmRlbGV0ZWQgPT09IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvci52YWx1ZS5wYXNzd29yZCA9PT0gdXNlckluZm8ucGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKDApOyAvLyBsb2dpbiBzdWNjZXNmdWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKC0xKTsgLy8gd3JvbmcgcGFzc3dvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y3Vyc29yLmNvbnRpbnVlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoLTIpOyAvLyB1c2VybmFtZSBkb2VzIG5vdCBleGlzdFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0LyoqIFBST1RPVFlQRVMgZm9yIG5vdGUgaGFuZGxpbmdcclxuXHQgKiAgYWRkTm90ZSAtIGFkZHMgdGV4dCBmcm9tIGlucHV0IGZpZWxkXHJcblx0ICogIGRlbGV0ZU5vdGUgLSBkZWxldGVzIG5vdGUgYmFzZWQgb24gbm90ZSBpZFxyXG5cdCAqICBjb21wbGV0ZU5vdGUgLSBjb21wbGV0ZSBub3RlIGJhc2VkIG9uIG5vdGUgaWQgKGNoYW5nZSBjb21wbGV0ZWQgZmllbGQgb2Ygbm90ZSlcclxuXHQgKiAgbGlzdE5vdGVzIC0gbGlzdCBub3RlcyBiYXNlZCBvbiBjYXRlZ29yaWVzIChhbGwsIHgsIHksIHopXHJcblx0ICogXHJcblx0ICogIG9ubHkgbGlzdCBub3RlcyB0aGF0IGRvIG5vdCBoYXZlIGZpZWxkICdkZWxldGVkID0gdHJ1ZSdcclxuXHQgKi9cclxuXHRhZGROb3RlID0gKG5vdGVUZXh0OiBzdHJpbmcpID0+IHt9O1xyXG5cdGRlbGV0ZU5vdGUgPSAoaWQ6IG51bWJlcikgPT4ge307XHJcblx0Y29tcGxldGVOb3RlID0gKGlkOiBudW1iZXIpID0+IHt9O1xyXG5cdGxpc3ROb3RlcyA9IChjYXRlZ29yeU5hbWU6IHN0cmluZykgPT4ge307XHJcblxyXG5cdC8qKlxyXG5cdCAqICBQUk9UT1RZUEVTIGZvciBjYXRlZ29yeSBoYW5kbGluZ1xyXG5cdCAqL1xyXG5cdGFkZENhdGVnb3J5ID0gKGNhdGVnb3J5TmFtZTogc3RyaW5nKSA9PiB7XHJcblx0XHRsZXQgZGVmYXVsdENhdGVnOyAvLyBjaGVjayBpZiB0aGUgZGVmYXVsdCBjYXRlZ29yeSBleGlzdHNcclxuXHRcdGlmICghZGVmYXVsdENhdGVnKSB7IC8vIGNyZWF0ZSBpdCBpZiBpdCBkb2Vzbid0XHJcblx0XHRcdC8vIGNyZWF0ZSBkZWZhdWx0IGNhdGVnXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBoYW5kbGUgYWRkaW5nIG5ldyBjYXRlZ29yeVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCB7IERhdGFiYXNlIH07XHJcbiIsImltcG9ydCB7IEF1dGhlbnRpY2F0aW9uLCBJTG9naW4gfSBmcm9tICcuL3V0aWxzJ1xyXG5pbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gJy4vZGF0YWJhc2UnO1xyXG5cclxuY29uc3QgbG9naW5Vc2VybmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2dpblVzZXJuYW1lJykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuY29uc3QgbG9naW5QYXNzd29yZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2dpblBhc3N3b3JkJykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuY29uc3QgbG9naW5Gb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0taW5kZXgnKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XHJcbmNvbnN0IGxvZ2luRXJyb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW4tZXJyb3InKSBhcyBIVE1MRWxlbWVudDtcclxuXHJcbmNsYXNzIExvZ2luIGV4dGVuZHMgQXV0aGVudGljYXRpb24ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG5cdHN1Ym1pdEZvcm0oKTogSUxvZ2luIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHVzZXJuYW1lOiB0aGlzLl91c2VybmFtZSxcclxuXHRcdFx0cGFzc3dvcmQ6IHRoaXMuX3Bhc3N3b3JkLFxyXG5cdFx0fTtcclxuXHR9O1xyXG59XHJcblxyXG5sZXQgZGIgPSBuZXcgRGF0YWJhc2UoJ2RhdGFiYXNlMScpO1xyXG5jb25zdCB1c2VyID0gbmV3IExvZ2luO1xyXG5cclxuaWYgKGxvZ2luVXNlcm5hbWUpIGxvZ2luVXNlcm5hbWUuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHsgZ2V0SW5wdXQobG9naW5Vc2VybmFtZSkgfSk7XHJcbmlmIChsb2dpblBhc3N3b3JkKSBsb2dpblBhc3N3b3JkLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7IGdldElucHV0KGxvZ2luUGFzc3dvcmQpIH0pO1xyXG5cclxuaWYgKGxvZ2luRm9ybSkge1xyXG4gIGxvZ2luRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgZGIudmVyaWZ5TG9naW5JbmZvKHVzZXIuc3VibWl0Rm9ybSgpKVxyXG4gICAgICAudGhlbiggKHJlc3ApID0+IHtcclxuICAgICAgICBoYW5kbGVJbnB1dHMocmVzcCBhcyBOdW1iZXIpO1xyXG4gICAgICAgIGlmIChyZXNwID09PSAwKSB7XHJcbiAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdsb2dpbi10b2tlbicsICd2YWxpZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJbnB1dChlbGVtOiBIVE1MSW5wdXRFbGVtZW50KSB7XHJcbiAgaWYgKGVsZW0uaWQgPT09ICdsb2dpblVzZXJuYW1lJykgdXNlci51c2VybmFtZSA9IGVsZW0udmFsdWU7XHJcbiAgZWxzZSBpZiAoZWxlbS5pZCA9PT0gJ2xvZ2luUGFzc3dvcmQnKSB1c2VyLnBhc3N3b3JkID0gZWxlbS52YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlSW5wdXRzKGZsYWc6IE51bWJlcikge1xyXG4gIGlmIChmbGFnID09PSAwKSB7XHJcbiAgICBsb2dpbkVycm9yLmlubmVyVGV4dCA9ICcnO1xyXG4gIH0gZWxzZSBpZiAoZmxhZyA9PT0gLTEpIHtcclxuICAgIGxvZ2luRXJyb3IuaW5uZXJUZXh0ID0gJ3dyb25nIHBhc3N3b3JkJztcclxuICB9IGVsc2UgaWYgKGZsYWcgPT09IC0yKSB7XHJcbiAgICBsb2dpbkVycm9yLmlubmVyVGV4dCA9ICd1c2VybmFtZSBkb2VzIG5vdCBleGlzdCc7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF1dGhlbnRpY2F0aW9uLCBJVXNlciwgaW5wdXRWYWxpZGF0aW9uUmVnZXggfSBmcm9tICcuL3V0aWxzJ1xyXG5pbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gJy4vZGF0YWJhc2UnO1xyXG5cclxuY29uc3QgdXNlcm5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1c2VybmFtZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbmNvbnN0IHBhc3N3b3JkSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGFzc3dvcmQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5jb25zdCBjb25maXJtUHdJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb25maXJtZWQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5jb25zdCBlbWFpbElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VtYWlsJykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLXJlZ2lzdHJhdGlvbicpIGFzIEhUTUxGb3JtRWxlbWVudDtcclxuY29uc3Qgc3VibWl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N1Ym1pdCcpIGFzIEhUTUxGb3JtRWxlbWVudDtcclxuY29uc3QgcGFzc3dvcmRNYXRjaFBhcmFncmFwaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYXNzLW1hdGNoJykgYXMgSFRNTEVsZW1lbnQ7XHJcblxyXG5jbGFzcyBSZWdpc3RyYXRpb24gZXh0ZW5kcyBBdXRoZW50aWNhdGlvbiB7XHJcbiAgcHJvdGVjdGVkIF9jb25maXJtZWQ6IHN0cmluZztcclxuICBwcm90ZWN0ZWQgX2VtYWlsOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuX2NvbmZpcm1lZCA9ICcnO1xyXG4gICAgdGhpcy5fZW1haWwgPSAnJztcclxuICB9O1xyXG5cclxuICBzZXQgY29uZmlybWVkKHZhbHVlOiBzdHJpbmcpIHsgdGhpcy5fY29uZmlybWVkID0gdmFsdWU7IH07XHJcbiAgc2V0IGVtYWlsKHZhbHVlOiBzdHJpbmcpIHsgdGhpcy5fZW1haWwgPSB2YWx1ZTsgfTtcclxuXHJcbiAgdmFsaWRhdGVJbnB1dChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IEJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGlucHV0VmFsaWRhdGlvblJlZ2V4W2tleV0udGVzdCh2YWx1ZSk7XHJcbiAgfTtcclxuXHJcbiAgY2hlY2tQYXNzd29yZE1hdGNoKCk6IEJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICh0aGlzLl9wYXNzd29yZCA9PT0gdGhpcy5fY29uZmlybWVkKTtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlRm9ybSgpOiBCb29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMuX3VzZXJuYW1lICE9PSAnJyAmJlxyXG4gICAgICB0aGlzLl9wYXNzd29yZCAhPT0gJycgJiZcclxuICAgICAgdGhpcy5fY29uZmlybWVkICE9PSAnJyAmJlxyXG4gICAgICB0aGlzLl9lbWFpbCAhPT0gJycgJiZcclxuICAgICAgdGhpcy5jaGVja1Bhc3N3b3JkTWF0Y2goKVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBzdWJtaXRGb3JtKCk6IElVc2VyIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHVzZXJuYW1lOiB0aGlzLl91c2VybmFtZSxcclxuICAgICAgcGFzc3dvcmQ6IHRoaXMuX3Bhc3N3b3JkLFxyXG4gICAgICBlbWFpbDogdGhpcy5fZW1haWwsXHJcbiAgICAgIGRlbGV0ZWQ6IGZhbHNlXHJcbiAgICB9O1xyXG4gIH07XHJcbn1cclxuXHJcbmxldCBkYiA9IG5ldyBEYXRhYmFzZSgnZGF0YWJhc2UxJyk7XHJcbmNvbnN0IHVzZXIgPSBuZXcgUmVnaXN0cmF0aW9uKCk7XHJcblxyXG5pZiAodXNlcm5hbWVJbnB1dCkgdXNlcm5hbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4geyB2YWxpZGF0ZUZpZWxkKHVzZXJuYW1lSW5wdXQpIH0pO1xyXG5pZiAocGFzc3dvcmRJbnB1dCkgcGFzc3dvcmRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4geyB2YWxpZGF0ZUZpZWxkKHBhc3N3b3JkSW5wdXQpIH0pO1xyXG5pZiAoY29uZmlybVB3SW5wdXQpIGNvbmZpcm1Qd0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7IHZhbGlkYXRlRmllbGQoY29uZmlybVB3SW5wdXQpIH0pO1xyXG5pZiAoZW1haWxJbnB1dCkgZW1haWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4geyB2YWxpZGF0ZUZpZWxkKGVtYWlsSW5wdXQpIH0pO1xyXG5cclxuaWYgKGZvcm0pIHtcclxuICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIFxyXG4gICAgZGIuYWRkVXNlcih1c2VyLnN1Ym1pdEZvcm0oKSBhcyBJVXNlcilcclxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKTtcclxuXHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrQWxsRmllbGRzKCkge1xyXG4gIGlmICh1c2VyLnZhbGlkYXRlRm9ybSgpKSB7XHJcbiAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIHBhc3N3b3JkTWF0Y2hQYXJhZ3JhcGguc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICB9IGVsc2Uge1xyXG4gICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIGlmICh1c2VyLmNoZWNrUGFzc3dvcmRNYXRjaCgpKSB7XHJcbiAgICAgIHBhc3N3b3JkTWF0Y2hQYXJhZ3JhcGguc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBhc3N3b3JkTWF0Y2hQYXJhZ3JhcGguc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZUZpZWxkKGVsZW06IEhUTUxJbnB1dEVsZW1lbnQpIHtcclxuICAgIGxldCB2YWxpZDogQm9vbGVhbiA9IHVzZXIudmFsaWRhdGVJbnB1dChlbGVtLmlkLCBlbGVtLnZhbHVlKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghdmFsaWQpIHRocm93IFwiSW52YWxpZCBJbnB1dFwiO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICBlbGVtLmNsYXNzTmFtZSA9IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIjtcclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICBpZiAoZWxlbS5pZCA9PT0gJ3VzZXJuYW1lJykgdmFsaWQgPyAodXNlci51c2VybmFtZSA9IGVsZW0udmFsdWUpIDogKHVzZXIudXNlcm5hbWUgPSAnJyk7XHJcbiAgICAgIGVsc2UgaWYgKGVsZW0uaWQgPT09ICdwYXNzd29yZCcpIHZhbGlkID8gKHVzZXIucGFzc3dvcmQgPSBlbGVtLnZhbHVlKSA6ICh1c2VyLnBhc3N3b3JkID0gJycpO1xyXG4gICAgICBlbHNlIGlmIChlbGVtLmlkID09PSAnY29uZmlybWVkJykgdmFsaWQgPyAodXNlci5jb25maXJtZWQgPSBlbGVtLnZhbHVlKSA6ICh1c2VyLmNvbmZpcm1lZCA9ICcnKTtcclxuICAgICAgZWxzZSBpZiAoZWxlbS5pZCA9PT0gJ2VtYWlsJykgdmFsaWQgPyAodXNlci5lbWFpbCA9IGVsZW0udmFsdWUpIDogKHVzZXIuZW1haWwgPSAnJyk7XHJcblxyXG4gICAgICBpZiAodmFsaWQpIGVsZW0uY2xhc3NOYW1lID0gXCJmb3JtLWNvbnRyb2wgaXMtdmFsaWRcIjtcclxuXHJcbiAgICAgIGNoZWNrQWxsRmllbGRzKCk7XHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==