!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);class n{constructor(e){this.dbName=e,this.addUser=e=>new Promise((t,r)=>{this.usernameExists(e.username).then(t=>{if(t)console.log("Err: Username already exists.");else{const t=this.db.transaction(["users"],"readwrite").objectStore("users").add(e);t.onsuccess=function(e){console.log("User added!")},t.onerror=function(e){}}})}),this.usernameExists=e=>new Promise((t,r)=>{this.db.transaction(["users"]).objectStore("users").openCursor().onsuccess=r=>{let n=r.target.result;n?n.value.username===e?t(!0):n.continue():(console.log("No more entries!"),t(!1))}}),this.addNote=e=>{},this.deleteNote=e=>{},this.completeNote=e=>{},this.listNotes=e=>{},this.addCategory=e=>{},this.IndxDb=window.indexedDB,this.db={},this.openDB()}openDB(){return new Promise((e,t)=>{let r;(r=this.IndxDb.open(this.dbName)).onupgradeneeded=e=>{this.db=e.target.result,this.db.createObjectStore("users",{keyPath:"id",autoIncrement:!0}),this.db.createObjectStore("list",{keyPath:"id"}),this.db.createObjectStore("category",{keyPath:"id",autoIncrement:!0}),console.log("Database was set up successfully")},r.onsuccess=t=>{console.log("success"),e(this.db=t.target.result)},r.onerror=()=>{t(console.log("Database failed to open"))}})}}const o=document.querySelector("#db-btn");!function(){let e=new n("database1"),t={username:"a",password:"ab",email:"agdf",deleted:!1};o.addEventListener("click",()=>{e.addUser(t)})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,